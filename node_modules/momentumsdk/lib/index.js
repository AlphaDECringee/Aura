"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Asteria = void 0;
const asteria_1 = require("./asteria");
exports.Asteria = asteria_1.default;
class Momentum {
    constructor(options) {
        this.url = options.url + "/api";
        validateApiKey(options.apikey);
        this.apikey = options.apikey;
        if (!this.url) {
            throw new Error('MomentumOptions.url is required');
        }
        if (!this.apikey) {
            throw new Error('MomentumOptions.apikey is required');
        }
    }
    getUser(key, value) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const user = yield fetch(this.url + "/user/" + key + "/" + value, {
                    method: "GET",
                    headers: {
                        "x-api-key": this.apikey,
                    }
                });
                const userReturn = yield user.json();
                return userReturn;
            }
            catch (error) {
                console.log(error);
                throw new Error(error);
            }
        });
    }
    updateUser(key, value, field, newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const updatedUser = yield fetch(this.url + "/user/" + key + "/" + value, {
                    method: "POST",
                    headers: {
                        "x-api-key": this.apikey,
                    },
                    body: JSON.stringify({
                        fieldToUpdate: field,
                        newValue: newValue
                    })
                });
                const userReturn = yield updatedUser.json();
                return userReturn;
            }
            catch (error) {
                console.log(error);
                throw new Error(error);
            }
        });
    }
    getProfile(accountId, value) {
        return __awaiter(this, void 0, void 0, function* () {
            try {
                const profile = yield fetch(this.url + "/profile/accountId/" + accountId + "/" + value, {
                    method: "GET",
                    headers: {
                        "x-api-key": this.apikey,
                    }
                });
                return yield profile.json();
            }
            catch (error) {
                console.log(error);
                throw new Error(error);
            }
        });
    }
}
function isApiKey(value) {
    return value.length === 32;
}
function validateApiKey(apikey) {
    if (!isApiKey(apikey)) {
        throw new Error("Invalid API key. Please provide an API key that is exactly 32 characters long.");
    }
}
exports.default = Momentum;
